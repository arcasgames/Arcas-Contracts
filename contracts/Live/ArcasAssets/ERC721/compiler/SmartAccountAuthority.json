{"language":"Solidity","sources":{"contracts/ArcasHub/Testnet/SmartAccountAuthority.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\ncontract SmartAccountAuthority {\n    // Mapping from smart account to authorized EOA\n    mapping(address => address) public smartAccountToEOA;\n    \n    // Mapping from EOA to authorized smart account\n    mapping(address => address) public eoaToSmartAccount;\n    \n    // Events\n    event SmartAccountAuthorized(address indexed eoa, address indexed smartAccount, bool authorized);\n    \n    /**\n     * @dev Authorize or unauthorize a smart account for an EOA\n     * @param smartAccount The smart account address to authorize\n     * @param authorized Whether to authorize (true) or unauthorize (false)\n     */\n    function authorizeSmartAccount(address smartAccount, bool authorized) external {\n        require(smartAccount != address(0), \"Invalid smart account address\");\n        \n        if (authorized) {\n            // Authorize the smart account\n            require(eoaToSmartAccount[msg.sender] == address(0), \"EOA already has authorized smart account\");\n            require(smartAccountToEOA[smartAccount] == address(0), \"Smart account already authorized\");\n            \n            eoaToSmartAccount[msg.sender] = smartAccount;\n            smartAccountToEOA[smartAccount] = msg.sender;\n            \n            emit SmartAccountAuthorized(msg.sender, smartAccount, true);\n        } else {\n            // Unauthorize the smart account\n            require(eoaToSmartAccount[msg.sender] == smartAccount, \"Smart account not authorized for this EOA\");\n            \n            delete eoaToSmartAccount[msg.sender];\n            delete smartAccountToEOA[smartAccount];\n            \n            emit SmartAccountAuthorized(msg.sender, smartAccount, false);\n        }\n    }\n    \n    /**\n     * @dev Get the EOA that authorized a smart account\n     * @param smartAccount The smart account address\n     * @return The EOA address\n     */\n    function getAuthorizedEOA(address smartAccount) external view returns (address) {\n        return smartAccountToEOA[smartAccount];\n    }\n    \n    /**\n     * @dev Get the authorized smart account for an EOA\n     * @param eoa The EOA address\n     * @return The smart account address\n     */\n    function getAuthorizedSmartAccount(address eoa) external view returns (address) {\n        return eoaToSmartAccount[eoa];\n    }\n    \n    /**\n     * @dev Check if a smart account is authorized\n     * @param smartAccount The smart account address\n     * @return Whether the smart account is authorized\n     */\n    function isAuthorizedSmartAccount(address smartAccount) external view returns (bool) {\n        return smartAccountToEOA[smartAccount] != address(0);\n    }\n    \n    /**\n     * @dev Get the EOA owner for a caller (EOA or smart account)\n     * @param caller The address calling the function\n     * @return The EOA owner address\n     */\n    function getEOAOwner(address caller) external view returns (address) {\n        // If caller is an EOA, return the caller\n        if (smartAccountToEOA[caller] == address(0)) {\n            return caller;\n        }\n        \n        // If caller is a smart account, return the authorized EOA\n        return smartAccountToEOA[caller];\n    }\n    \n    /**\n     * @dev Allow smart account to dissociate itself from an EOA\n     */\n    function dissociateFromEOA() external {\n        address eoa = smartAccountToEOA[msg.sender];\n        require(eoa != address(0), \"No EOA associated\");\n        \n        delete eoaToSmartAccount[eoa];\n        delete smartAccountToEOA[msg.sender];\n        \n        emit SmartAccountAuthorized(eoa, msg.sender, false);\n    }\n    \n    /**\n     * @dev Allow EOA to dissociate itself from its associated smart account\n     */\n    function dissociateFromSmartAccount() external {\n        address smartAccount = eoaToSmartAccount[msg.sender];\n        require(smartAccount != address(0), \"No smart account associated\");\n        \n        delete eoaToSmartAccount[msg.sender];\n        delete smartAccountToEOA[smartAccount];\n        \n        emit SmartAccountAuthorized(msg.sender, smartAccount, false);\n    }\n} "}},"settings":{"optimizer":{"enabled":false,"runs":200},"outputSelection":{"*":{"":["ast"],"*":["abi","metadata","devdoc","userdoc","storageLayout","evm.legacyAssembly","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","evm.gasEstimates","evm.assembly"]}},"remappings":[]}}