{"language":"Solidity","sources":{"contracts/ArcasHub/Testnet/BastoniumTiers.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\n/**\n * @title BastoniumTiersTestnet\n * @dev Simplified rarity management contract for Bastonium NFTs on testnet\n */\ncontract BastoniumTiersTestnet is Ownable {\n    \n    // Rarity mapping using an enum\n    enum Rarity { UNASSIGNED, COMMON, UNCOMMON, RARE }\n    \n    // Mapping from token ID to rarity\n    mapping(uint256 => Rarity) public nftRarity;\n    \n    // Total supply of Bastonium NFTs\n    uint256 public constant TOTAL_SUPPLY = 500;\n    \n    // Events\n    event RaritySet(uint256 indexed nftId, Rarity rarity);\n    event RarityBatchSet(uint256[] nftIds, Rarity[] rarities);\n    \n    constructor() Ownable(msg.sender) {}\n    \n    /**\n     * @dev Set rarity for a specific NFT\n     * @param nftId The NFT token ID\n     * @param rarity The rarity to assign\n     */\n    function setRarity(uint256 nftId, Rarity rarity) external onlyOwner {\n        require(nftId > 0 && nftId <= TOTAL_SUPPLY, \"NFT ID out of range\");\n        require(rarity != Rarity.UNASSIGNED, \"Cannot set UNASSIGNED rarity\");\n        \n        nftRarity[nftId] = rarity;\n        emit RaritySet(nftId, rarity);\n    }\n    \n    /**\n     * @dev Set rarity for multiple NFTs in batch\n     * @param nftIds Array of NFT token IDs\n     * @param rarities Array of rarities to assign\n     */\n    function setRarityBatch(uint256[] calldata nftIds, Rarity[] calldata rarities) external onlyOwner {\n        require(nftIds.length == rarities.length, \"Arrays length mismatch\");\n        \n        for (uint256 i = 0; i < nftIds.length; i++) {\n            require(nftIds[i] > 0 && nftIds[i] <= TOTAL_SUPPLY, \"NFT ID out of range\");\n            require(rarities[i] != Rarity.UNASSIGNED, \"Cannot set UNASSIGNED rarity\");\n            \n            nftRarity[nftIds[i]] = rarities[i];\n        }\n        \n        emit RarityBatchSet(nftIds, rarities);\n    }\n    \n    /**\n     * @dev Get the rarity of a specific NFT\n     * @param nftId The NFT token ID\n     * @return The rarity of the NFT\n     */\n    function getRarity(uint256 nftId) external view returns (Rarity) {\n        require(nftId > 0 && nftId <= TOTAL_SUPPLY, \"NFT ID out of range\");\n        return nftRarity[nftId];\n    }\n    \n    /**\n     * @dev Get rarity for multiple NFTs\n     * @param nftIds Array of NFT token IDs\n     * @return Array of rarities\n     */\n    function getRarityBatch(uint256[] calldata nftIds) external view returns (Rarity[] memory) {\n        Rarity[] memory rarities = new Rarity[](nftIds.length);\n        \n        for (uint256 i = 0; i < nftIds.length; i++) {\n            require(nftIds[i] > 0 && nftIds[i] <= TOTAL_SUPPLY, \"NFT ID out of range\");\n            rarities[i] = nftRarity[nftIds[i]];\n        }\n        \n        return rarities;\n    }\n    \n    /**\n     * @dev Check if an NFT has been assigned a rarity\n     * @param nftId The NFT token ID\n     * @return True if rarity is assigned\n     */\n    function hasRarity(uint256 nftId) external view returns (bool) {\n        require(nftId > 0 && nftId <= TOTAL_SUPPLY, \"NFT ID out of range\");\n        return nftRarity[nftId] != Rarity.UNASSIGNED;\n    }\n    \n    /**\n     * @dev Get rarity counts\n     * @return rare Count of rare NFTs\n     * @return uncommon Count of uncommon NFTs\n     * @return common Count of common NFTs\n     * @return unassigned Count of unassigned NFTs\n     */\n    function getRarityCounts() external view returns (uint256 rare, uint256 uncommon, uint256 common, uint256 unassigned) {\n        for (uint256 i = 1; i <= TOTAL_SUPPLY; i++) {\n            Rarity rarity = nftRarity[i];\n            if (rarity == Rarity.RARE) {\n                rare++;\n            } else if (rarity == Rarity.UNCOMMON) {\n                uncommon++;\n            } else if (rarity == Rarity.COMMON) {\n                common++;\n            } else {\n                unassigned++;\n            }\n        }\n    }\n} "},"@openzeppelin/contracts/access/Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"},"@openzeppelin/contracts/utils/Context.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"}},"settings":{"optimizer":{"enabled":false,"runs":200},"outputSelection":{"*":{"":["ast"],"*":["abi","metadata","devdoc","userdoc","storageLayout","evm.legacyAssembly","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","evm.gasEstimates","evm.assembly"]}},"remappings":[]}}